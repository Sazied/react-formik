{"version":3,"sources":["logo.svg","components/TextError.js","components/Input.js","components/TextArea.js","components/Select.js","components/RadioButtons.js","components/CheckboxGroup.js","components/DatePicker.js","components/FormikControl.js","components/FormikContainer.js","App.js","reportWebVitals.js","index.js"],"names":["TextError","props","className","children","Input","name","value","label","rest","htmlFor","field","meta","console","log","id","component","TextArea","as","Select","options","form","map","option","key","RadioButtons","Fragment","type","checked","CheckboxGroup","includes","DatePicker","setFieldValue","selected","onChange","val","FormikControl","control","FormikContainer","dropdownOptions","radioOptions","checkboxOptions","initialValues","email","description","selectOption","radioOption","checkboxOption","date","validationSchema","Yup","required","min","nullable","onSubmit","values","formik","onValidationChange","a","b","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf85ee9d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nconst TextError = (props) => {\n    return (\n        <p className='error'>\n            {props.children}\n        </p>\n    )\n}\n\nexport default TextError","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst Input = (props) =>\n{\n    const { name, value, label, ...rest } = props\n\n    return (\n        <div className=\"form-control\">\n            <label htmlFor={name}>{label}</label>\n            <Field name={name}>\n                {\n                    ({field, meta}) => {\n                        console.log(field)\n                        return (\n                            <input\n                                id={name}\n                                value={value}\n                                {...field}\n                                {...rest}\n                            />\n                        )\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst TextArea = (props) =>\n{\n    const { label, name, ...rest } = props\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field as='textarea' name={name} {...rest} />\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default TextArea","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst Select = (props) =>\n{\n    const { name, label, options, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n            >\n                {({field, meta, form}) => {\n                    // console.log('FIELD', field)\n                    return(\n                        <select\n                            id={name}\n                            {...field}\n                        >\n                            {\n                                options.map(option => {\n                                    return(\n                                        <option\n                                            key={option.value}\n                                            value={option.value}\n                                        >\n                                            {option.key}\n                                        </option>\n                                    )\n                                })\n                            }\n                        </select>\n                    )\n                }}\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default Select","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst RadioButtons = (props) =>\n{\n    const { label, name, options, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n            >\n                {\n                    ({field}) => {\n                        // console.log('Field', field)\n                        return (\n                            options.map(option => {\n                                return (\n                                    <React.Fragment key={option.key}>\n                                        <input \n                                            type='radio'\n                                            id={option.value}\n                                            {...field}\n                                            value={option.value}\n                                            checked={field.value === option.value}\n                                        />\n                                        <label htmlFor={option.value}>{option.key}</label>\n                                    </React.Fragment>\n                                )\n                            })\n                        )\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default RadioButtons","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst CheckboxGroup = (props) =>\n{\n    const { label, name, options, ...rest } = props\n\n    \n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n                >\n                {\n                    ({field}) => { \n                        // console.log('FIELD', field)\n                        // console.log(field.value)\n                        return options.map(option => {\n                            return (\n                                <React.Fragment key={option.key} >\n                                    <input \n                                        type='checkbox'\n                                        id={option.value}\n                                        {...field}\n                                        value={option.value}\n                                        checked={field.value.includes(option.value)}\n                                    />\n                                    <label htmlFor={option.value}>{option.key}</label>\n                                </React.Fragment>\n                            )\n                        })\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default CheckboxGroup","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport DateView from 'react-datepicker'\n\nimport 'react-datepicker/dist/react-datepicker.css'\nimport TextError from './TextError'\n\n\nconst DatePicker = (props) =>\n{\n    const { name, label, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field name={name}>\n                {\n                    ({ form, field }) => {\n                        const { setFieldValue } = form\n                        const { value } = field\n                        \n                        return <DateView \n                            id={name}\n                            {...field}\n                            {...rest}\n                            selected={value}\n                            onChange={val => setFieldValue(name, val)}\n                        />\n                    }\n                }\n            </Field>\n        </div>\n    )\n}\n\nexport default DatePicker","import React from 'react'\n\nimport Input from './Input';\nimport TextArea from './TextArea';\nimport Select from './Select'\nimport RadioButtons from './RadioButtons';\nimport CheckboxGroup from './CheckboxGroup';\nimport DatePicker from './DatePicker';\n\n\nconst FormikControl = (props) => \n{\n    const { control, ...rest } = props;\n\n    switch (control)\n    {\n        case 'input':\n            return <Input {...rest} />\n        case 'textarea':\n            return <TextArea {...rest} />\n        case 'select':\n            return <Select {...rest} />\n        case 'radio':\n            return <RadioButtons {...rest} />\n        case 'checkbox':\n            return <CheckboxGroup {...rest} />\n        case 'date':\n            return <DatePicker {...rest} />\n        default: return null\n    }\n}\n\nexport default FormikControl","import React from 'react'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport FormikControl from './FormikControl'\nimport { Effect } from 'formik-effect'\n\nconst FormikContainer = () => \n{\n    const dropdownOptions = [\n        { key: 'Select an Option', value:'' },\n        { key: 'Option 1', value: 'option1' },\n        { key: 'Option 2', value: 'option2' },\n        { key: 'Option 3', value: 'option3' },\n    ]\n\n    const radioOptions = [\n        { key: 'Option 1', value: 'rOption1' },\n        { key: 'Option 2', value: 'rOption2' },\n        { key: 'Option 3', value: 'rOption3' },\n    ]\n\n    const checkboxOptions = [\n        { key: 'Option 1', value: 'cOption1' },\n        { key: 'Option 2', value: 'cOption2' },\n        { key: 'Option 3', value: 'cOption3' },\n    ]\n\n    const initialValues = {\n        email: '',\n        description: '',\n        selectOption: '',\n        radioOption: '',\n        checkboxOption: [],\n        date: null,\n    }\n\n    const validationSchema = Yup.object({\n        email: Yup.string().required('Required'),\n        description: Yup.string().required('Required'),\n        selectOption: Yup.string().required('Required'),\n        radioOption: Yup.string().required('Required'),\n        checkboxOption: Yup.array().min(1, 'Required'),\n        date: Yup.date().required('Required').nullable(),\n    })\n\n    const onSubmit = values => console.log('Form Data', values)\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n        >\n            {\n                formik => (\n                    <Form>\n                        <Effect \n                            onValidationChange={(a, b) =>\n                            {\n                                console.log(a, b);\n                            }}\n                        />\n                        <FormikControl \n                            control='input'\n                            type='email'\n                            label='Email GITHUB ACTIONS'\n                            name='email'\n                            value={initialValues.email}\n                        />\n                        <FormikControl \n                            control='textarea'\n                            label='Description'\n                            name='description'\n                        />\n                        <FormikControl \n                            control='select'\n                            label='Select an Option'\n                            name='selectOption'\n                            options={dropdownOptions}\n                        />\n                        <FormikControl \n                            control='radio'\n                            label='Select an Option'\n                            name='radioOption'\n                            options={radioOptions}\n                        />\n                        <FormikControl \n                            control='checkbox'\n                            label='Pick Options'\n                            name='checkboxOption'\n                            options={checkboxOptions}\n                        />\n                        <FormikControl \n                            control='date'\n                            label='Pick a Date'\n                            name='date'\n                        />\n                        <button type='submit'>Submit</button>\n                    </Form>\n                )\n            }\n        </Formik>\n    )\n}\n\nexport default FormikContainer","import logo from './logo.svg';\nimport './App.css';\n\n\nimport FormikContainer from './components/FormikContainer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormikContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}