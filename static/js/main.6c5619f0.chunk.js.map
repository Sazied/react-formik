{"version":3,"sources":["logo.svg","components/TextError.js","components/Input.js","components/TextArea.js","components/Select.js","components/RadioButtons.js","components/CheckboxGroup.js","components/DatePicker.js","components/FormikControl.js","components/FormikContainer.js","components/YoutubeForm.js","components/LoginButton.js","components/LogoutButton.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["TextError","props","className","children","Input","name","value","label","rest","htmlFor","field","meta","console","log","id","component","TextArea","as","Select","options","form","map","option","key","RadioButtons","Fragment","type","checked","CheckboxGroup","includes","DatePicker","setFieldValue","selected","onChange","val","FormikControl","control","FormikContainer","dropdownOptions","radioOptions","checkboxOptions","initialValues","email","description","selectOption","radioOption","checkboxOption","date","validationSchema","Yup","required","min","nullable","onSubmit","values","formik","onValidationChange","a","b","channel","comments","socials","facebook","twitter","phoneNumbers","phNumbers","onSubmitProps","setSubmitting","resetForm","validateComments","error","YoutubeForm","Field","errorMsg","validate","touched","fieldArrayProps","push","remove","phNumber","index","onClick","disabled","isValid","isSubmitting","LoginButton","loginWithRedirect","useAuth0","LogoutButton","logout","returnTo","window","location","origin","Profile","useState","isDemo","setIsDemo","user","isAuthenticated","isLoading","useEffect","to","src","picture","alt","App","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.6c5619f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nconst TextError = (props) => {\n    return (\n        <p className='error'>\n            {props.children}\n        </p>\n    )\n}\n\nexport default TextError","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst Input = (props) =>\n{\n    const { name, value, label, ...rest } = props\n\n    return (\n        <div className=\"form-control\">\n            <label htmlFor={name}>{label}</label>\n            <Field name={name}>\n                {\n                    ({field, meta}) => {\n                        console.log(field)\n                        return (\n                            <input\n                                id={name}\n                                value={value}\n                                {...field}\n                                {...rest}\n                            />\n                        )\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst TextArea = (props) =>\n{\n    const { label, name, ...rest } = props\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field as='textarea' name={name} {...rest} />\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default TextArea","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst Select = (props) =>\n{\n    const { name, label, options, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n            >\n                {({field, meta, form}) => {\n                    // console.log('FIELD', field)\n                    return(\n                        <select\n                            id={name}\n                            {...field}\n                        >\n                            {\n                                options.map(option => {\n                                    return(\n                                        <option\n                                            key={option.value}\n                                            value={option.value}\n                                        >\n                                            {option.key}\n                                        </option>\n                                    )\n                                })\n                            }\n                        </select>\n                    )\n                }}\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default Select","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst RadioButtons = (props) =>\n{\n    const { label, name, options, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n            >\n                {\n                    ({field}) => {\n                        // console.log('Field', field)\n                        return (\n                            options.map(option => {\n                                return (\n                                    <React.Fragment key={option.key}>\n                                        <input \n                                            type='radio'\n                                            id={option.value}\n                                            {...field}\n                                            value={option.value}\n                                            checked={field.value === option.value}\n                                        />\n                                        <label htmlFor={option.value}>{option.key}</label>\n                                    </React.Fragment>\n                                )\n                            })\n                        )\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default RadioButtons","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\n\nimport TextError from './TextError'\n\n\nconst CheckboxGroup = (props) =>\n{\n    const { label, name, options, ...rest } = props\n\n    \n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field\n                name={name}\n                {...rest}\n                >\n                {\n                    ({field}) => { \n                        // console.log('FIELD', field)\n                        // console.log(field.value)\n                        return options.map(option => {\n                            return (\n                                <React.Fragment key={option.key} >\n                                    <input \n                                        type='checkbox'\n                                        id={option.value}\n                                        {...field}\n                                        value={option.value}\n                                        checked={field.value.includes(option.value)}\n                                    />\n                                    <label htmlFor={option.value}>{option.key}</label>\n                                </React.Fragment>\n                            )\n                        })\n                    }\n                }\n            </Field>\n            <ErrorMessage name={name} component={TextError} />\n        </div>\n    )\n}\n\nexport default CheckboxGroup","import React from 'react'\nimport { Field, ErrorMessage } from 'formik'\nimport DateView from 'react-datepicker'\n\nimport 'react-datepicker/dist/react-datepicker.css'\nimport TextError from './TextError'\n\n\nconst DatePicker = (props) =>\n{\n    const { name, label, ...rest } = props\n\n    return (\n        <div className='form-control'>\n            <label htmlFor={name}>{label}</label>\n            <Field name={name}>\n                {\n                    ({ form, field }) => {\n                        const { setFieldValue } = form\n                        const { value } = field\n                        \n                        return <DateView \n                            id={name}\n                            {...field}\n                            {...rest}\n                            selected={value}\n                            onChange={val => setFieldValue(name, val)}\n                        />\n                    }\n                }\n            </Field>\n        </div>\n    )\n}\n\nexport default DatePicker","import React from 'react'\n\nimport Input from './Input';\nimport TextArea from './TextArea';\nimport Select from './Select'\nimport RadioButtons from './RadioButtons';\nimport CheckboxGroup from './CheckboxGroup';\nimport DatePicker from './DatePicker';\n\n\nconst FormikControl = (props) => \n{\n    const { control, ...rest } = props;\n\n    switch (control)\n    {\n        case 'input':\n            return <Input {...rest} />\n        case 'textarea':\n            return <TextArea {...rest} />\n        case 'select':\n            return <Select {...rest} />\n        case 'radio':\n            return <RadioButtons {...rest} />\n        case 'checkbox':\n            return <CheckboxGroup {...rest} />\n        case 'date':\n            return <DatePicker {...rest} />\n        default: return null\n    }\n}\n\nexport default FormikControl","import React from 'react'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport FormikControl from './FormikControl'\nimport { Effect } from 'formik-effect'\nimport { Link } from 'react-router-dom'\n\nconst FormikContainer = () => \n{\n    const dropdownOptions = [\n        { key: 'Select an Option', value:'' },\n        { key: 'Option 1', value: 'option1' },\n        { key: 'Option 2', value: 'option2' },\n        { key: 'Option 3', value: 'option3' },\n    ]\n\n    const radioOptions = [\n        { key: 'Option 1', value: 'rOption1' },\n        { key: 'Option 2', value: 'rOption2' },\n        { key: 'Option 3', value: 'rOption3' },\n    ]\n\n    const checkboxOptions = [\n        { key: 'Option 1', value: 'cOption1' },\n        { key: 'Option 2', value: 'cOption2' },\n        { key: 'Option 3', value: 'cOption3' },\n    ]\n\n    const initialValues = {\n        email: '',\n        description: '',\n        selectOption: '',\n        radioOption: '',\n        checkboxOption: [],\n        date: null,\n    }\n\n    const validationSchema = Yup.object({\n        email: Yup.string().required('Required'),\n        description: Yup.string().required('Required'),\n        selectOption: Yup.string().required('Required'),\n        radioOption: Yup.string().required('Required'),\n        checkboxOption: Yup.array().min(1, 'Required'),\n        date: Yup.date().required('Required').nullable(),\n    })\n\n    const onSubmit = values => console.log('Form Data', values)\n\n    return (\n        <>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={onSubmit}\n            >\n                {\n                    formik => (\n                        <Form>\n                            <Effect \n                                onValidationChange={(a, b) =>\n                                {\n                                    console.log(a, b);\n                                }}\n                            />\n                            <FormikControl \n                                control='input'\n                                type='email'\n                                label='Email'\n                                name='email'\n                                value={initialValues.email}\n                            />\n                            <FormikControl \n                                control='textarea'\n                                label='Description'\n                                name='description'\n                            />\n                            <FormikControl \n                                control='select'\n                                label='Select an Option'\n                                name='selectOption'\n                                options={dropdownOptions}\n                            />\n                            <FormikControl \n                                control='radio'\n                                label='Select an Option'\n                                name='radioOption'\n                                options={radioOptions}\n                            />\n                            <FormikControl \n                                control='checkbox'\n                                label='Pick Options'\n                                name='checkboxOption'\n                                options={checkboxOptions}\n                            />\n                            <FormikControl \n                                control='date'\n                                label='Pick a Date'\n                                name='date'\n                            />\n                            <button type='submit'>Submit</button>\n                        </Form>\n                    )\n                }\n            </Formik>\n        </>\n    )\n}\n\nexport default FormikContainer","import React from \"react\";\nimport { Formik, Form, Field, ErrorMessage, FieldArray, FastField } from \"formik\";\nimport * as Yup from 'yup';\nimport TextError from \"./TextError\";\nimport { Link } from 'react-router-dom';\n\n\n\nconst initialValues = {\n  name: '',\n  email: '',\n  channel: '',\n  comments: '',\n  socials: {\n    facebook: '',\n    twitter: '',\n  },\n  phoneNumbers: ['', ''],\n  phNumbers: [''],\n}\n\nconst onSubmit = (values, onSubmitProps) => {\n  console.log('Form data', values)\n  console.log('On Submit Props', onSubmitProps)\n  onSubmitProps.setSubmitting(false)\n  onSubmitProps.resetForm()\n}\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Required'),\n  email: Yup.string()\n    .email('Invalid email format')\n    .required('Required'),\n  channel: Yup.string().required('Required')\n})\n\nconst validateComments = value => {\n  let error\n  console.log(error)\n  if (!value) {\n    error = 'Required'\n  }\n  return error\n}\n\n\nconst YoutubeForm = () => \n{\n  console.log({Field})\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n        // validateOnMount\n        // validateOnChange={false}\n        // validateOnBlur={false}\n      >\n        {\n          formik => {\n            console.log('Formik Props', formik)\n            return (\n              <Form>\n              <div className='form-control'>\n                <label htmlFor=\"name\">Name</label>\n                <Field\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  />\n                <ErrorMessage name='name' component={TextError} />\n              </div>\n      \n              <div className='form-control'>    \n                <label htmlFor=\"email\">Email</label>\n                <Field\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  />\n                <ErrorMessage name='email'>\n                  {\n                    (errorMsg) => \n                      <p className='error' >{errorMsg}</p>\n                  }\n                </ErrorMessage>\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"channel\">Channel</label>\n                <Field\n                  type=\"text\"\n                  id=\"channel\"\n                  name=\"channel\"\n                />\n                <ErrorMessage name='channel'>\n                  {\n                    (errorMsg) =>\n                      <p className=\"error\">{errorMsg}</p>\n                  }\n                </ErrorMessage>\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"comments\">Comments</label>\n                <Field \n                  as=\"textarea\"\n                  id=\"comments\"\n                  name=\"comments\"\n                  validate={validateComments}\n                />\n                <ErrorMessage name=\"comments\" component={TextError} />\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"address\">Address</label>\n                <FastField name=\"address\">\n                  {\n                    (props) => {\n                      const { field, form, meta } = props\n                      // console.log('Render props', props)\n                      // console.log('Fast Field')\n                      return (\n                        <div>\n                          <input type='text' id=\"address\" {...field} />\n                          {\n                            meta.touched && \n                            meta.error &&\n                            <p>{meta.error}</p>\n                          }\n                        </div>\n                      )\n                    }\n                  }\n                </FastField>\n              </div>\n      \n              <div className=\"form-control\" >\n                <label htmlFor=\"facebook\">Facebook Profile</label>\n                <Field \n                  type=\"text\"\n                  id=\"facebook\"\n                  name=\"socials.facebook\"      \n                />\n              </div>\n      \n              <div className=\"form-control\" >\n                  <label htmlFor=\"twitter\" >Twitter Profile</label>\n                  <Field name=\"socials.twitter\">\n                    {\n                      (props) => {\n                        const { field, form, meta } = props;\n      \n                        return(\n                          <div>\n                            <input type=\"text\" id=\"twitter\" {...field} />\n                            {\n                              meta.touched && meta.error &&\n                            <p>{meta.error}</p>\n                            }\n                          </div>\n                        )\n                      }\n                    }\n                  </Field>\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"primaryPh\">Primary phone number</label>\n                <Field\n                  type=\"text\"\n                  id=\"primaryPh\"\n                  name=\"phoneNumbers[0]\"\n                />\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"secondaryPh\">Secondary phone number</label>\n                <Field name=\"phoneNumbers[1]\">\n                    {\n                      (props) => {\n                        const { field, form, meta } = props;\n      \n                        return(\n                          <input type=\"text\" id=\"secondaryPh\" {...field} />\n                        )\n                      }\n                    }\n                </Field>\n              </div>\n      \n              <div className=\"form-control\">\n                <label htmlFor=\"phNumbers\">List of phone numbers</label>\n                <FieldArray name=\"phNumbers\">\n                    {\n                      (fieldArrayProps) => {\n                        // console.log(fieldArrayProps)\n                        const { push, remove, form } = fieldArrayProps;\n                        const { values } = form;\n                        const { phNumbers } = values\n                        // console.log('Form Validation', form.errors)\n                        return (\n                          <div>\n                            {\n                              phNumbers.map((phNumber, index) => (\n                                <div key={index}>\n                                  <Field type=\"text\" name={`phNumbers[${index}]`} />\n                                  {\n                                    (index > 0) && \n                                    <button type=\"button\" onClick={() => remove(index)}> - </button>\n                                  }\n                                  <button type=\"button\" onClick={() => push('')}> + </button>\n                                </div>\n                              ))\n                            }\n                          </div>\n                        )\n                      }\n                    }\n                </FieldArray>   \n              </div>\n      \n              <button \n                type=\"submit\"\n                disabled={!formik.isValid || formik.isSubmitting}\n              >\n                Submit\n              </button>\n            </Form>\n            )\n          }\n        }\n      </Formik>\n    </>\n  );\n};\n\nexport default YoutubeForm;","import React from \"react\";\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n\nconst LoginButton = () =>\n{\n  const { loginWithRedirect } = useAuth0();\n\n  return <button onClick={() => loginWithRedirect()}>Log In</button>;\n};\n\nexport default LoginButton;","import React from \"react\";\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n\nconst LogoutButton = () =>\n{\n  const { logout } = useAuth0();\n\n  return (\n    <button onClick={() => logout({ returnTo: `${window.location.origin}/react-formik` })}>\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;","import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoginButton from \"./LoginButton\";\nimport LogoutButton from \"./LogoutButton\";\n\n\n\nconst Profile = () =>\n{\n  const [ isDemo, setIsDemo ] = useState(false);\n  \n  const { user, isAuthenticated, isLoading } = useAuth0();\n  \n  function isAuth()\n  {\n    if(user?.email === 'sazied@polyunity.com' || user?.email === 'marc-andre@polyunity.com') setIsDemo(true)\n  }\n  \n  \n  useEffect(() =>{\n    isAuth();\n  })\n\n  if (isLoading) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    isAuthenticated ? (\n      <div>\n        {\n          isDemo ? (\n            <ul>\n              <li><Link to='/'>Home</Link></li>\n              <li><Link to='/newform'>New From</Link></li>\n              <li><Link to='/oldform'>Old From</Link></li>\n            </ul>\n          ) : (\n            <h1>Please request Demo</h1>\n          )\n        }\n\t\t\t\t<LogoutButton />\n        <img src={user.picture} alt={user.name} />\n        <h2>{user.name}</h2>\n        <p>{user.email}</p>\n      </div>\n    ) : (<LoginButton />)\n  );\n};\n\nexport default Profile;","import logo from './logo.svg';\nimport './App.css';\n\n\nimport React, { Fragment, useState, useEffect, Component} from 'react';\n\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n} from 'react-router-dom';\n\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n\n\nimport FormikContainer from './components/FormikContainer';\nimport YoutubeForm from './components/YoutubeForm';\nimport Profile from './components/Profile';\nimport LogoutButton from './components/LogoutButton';\nimport LoginButton from './components/LoginButton';\n\n\nfunction App()\n{\n  const [ isDemo, setIsDemo ] = useState(false);\n  \n  const { user, isAuthenticated, isLoading } = useAuth0();\n  \n  function isAuth()\n  {\n    if(user?.email === 'sazied@polyunity.com' || user?.email === 'marc-andre@polyunity.com') setIsDemo(true)\n  }\n  \n  \n  useEffect(() =>{\n    isAuth();\n  })\n  \n  console.log(window.location)\n  console.log(window.location.origin)\n\n  return (\n    <Fragment>\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          {/* <Switch> */}\n            <Route\n              exact\n              path='/'\n              render={() => <Profile />}\n            />\n            <Route\n              path='/newform'\n              render={() => \n                isDemo ? (\n                  <FormikContainer />\n                  ) : (\n                    <Redirect to='/' />\n                    )\n                  }\n            />\n            <Route\n              path='/oldform'\n              render={() => \n                isDemo ? (\n                  <YoutubeForm />\n                ) : (\n                  <Redirect to='/' />\n                  )\n                }\n            />\n          {/* </Switch> */}\n        </div>\n      </HashRouter>\n    </Fragment>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Auth0Provider } from '@auth0/auth0-react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"dev-vaa1s4lm.us.auth0.com\"\n      clientId=\"QBB6awxGUWtHx8a5YZsAJd8AXwS7y0GM\"\n      redirectUri={`${window.location.origin}/react-formik`}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}